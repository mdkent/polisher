#!/usr/bin/ruby
# ruby gem polisher command line client
#
# Copyright (C) 2010 Red Hat, Inc.
# Written by Mohammed Morsi <mmorsi@redhat.com>
#
# This program is free software, you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
# 
# You should have received a copy of the the GNU Affero
# General Public License, along with Polisher. If not, see 
# <http://www.gnu.org/licenses/>

require 'rubygems'
require 'optparse'
require 'rest_client'

def main()
  # default values
  uri = "http://localhost:3000"
  command = nil
  gem_name = gem_id = gem_version = gem_uri = nil
  source_id = source_name = source_uri = nil
  event_id = event_version_qualifier = event_process = event_process_options = nil

  # setup cmd line options
  opts = OptionParser.new do |opts|
    opts.banner = "Usage: client [command] [options]"
    opts.on("-h", "--help", "Print help message") do
      puts opts
      exit
    end

    opts.on("-u", "--uri [uri]", "polisher uri") do |ouri|
      uri = ouri
    end

    opts.separator ""
    opts.separator "Commands:"
    opts.on("--gems", "get list of managed gems") do
      command = :gems
    end
    opts.on("--create-gem", "create new managed gem, must specify gem name & source id") do
      command = :create_gem
    end
    opts.on("--delete-gem", "delete managed gem, must specify gem id") do
      command = :delete_gem
    end
    opts.on("--gem-updated", "trigger gem updated event, must specify gem name, version, and gem_uri") do
      command = :gem_updated
    end
    opts.on("--sources", "get list of gem sources") do
      command = :sources
    end
    opts.on("--create-source", "create new gem source, must specify source name & uri") do
      command = :create_source
    end
    opts.on("--delete-source", "delete gem source, must specify source id") do
      command = :delete_source
    end
    opts.on("--create-event", "create new gem event, must specify gem id, gem version, version qualifier, process, and process options") do
      command = :create_event
    end
    opts.on("--delete-event", "delete gem event, must specify event id") do
      command = :delete_event
    end

    opts.separator ""
    opts.separator "Options:"
    opts.on("--gem-id [id]", "set gem id") do |id|
      gem_id = id
    end
    opts.on("--gem-name [name]", "set gem name") do |name|
      gem_name = name
    end
    opts.on("--gem-version [version]", "set gem vesion") do |version|
      gem_version = version
    end
    opts.on("--gem-uri [uri]", "set gem uri") do |ouri|
      gem_uri = ouri
    end
    opts.on("--source-id [id]", "set source id") do |id|
      source_id = id
    end
    opts.on("--source-name [name]", "set source name") do |name|
      source_name = name
    end
    opts.on("--source-uri [uri]", "set source uri") do |ouri|
      source_uri = ouri
    end
    opts.on("--event-id [id]", "set event id") do |id|
      event_id = id
    end
    opts.on("--version-qualifier [vq]", "set event version qualifier") do |vq|
      event_version_qualifier = vq
    end
    opts.on("--process [process]", "set event process") do |process|
      event_process = process
    end
    opts.on("--process-opts [opts]", "set process options") do |popts|
      event_process_options = popts
    end
  end

  # parse cmd line
  begin
    opts.parse!(ARGV)
  rescue OptionParser::InvalidOption
    puts opts
    exit
  end

  if command.nil? || uri.nil?
    puts "must specify command and uri"
    puts opts
    exit

 elsif command == :gems
   RestClient.get("#{uri}/gems.xml") { |response| puts response }

 elsif command == :create_gem
   if gem_name.nil? || source_id.nil?
     puts "must specify gem name and source id when creating gem"
     puts opts
     exit
   end
   RestClient.post("#{uri}/gems/create", :name => gem_name, :source_id => source_id){ |response| }

 elsif command == :delete_gem 
   if gem_id.nil?
     puts "must specify gem id when destroying gem"
     puts opts
     exit
   end
   RestClient.delete("#{uri}/gems/destroy/#{gem_id}"){ |response| }

 elsif command == :gem_updated 
   if gem_name.nil? || gem_version.nil? || gem_uri.nil?
     puts "must specify gem name, version, and uri when triggering update"
     puts opts
     exit
   end
   RestClient.post("#{uri}/gems/updated", 
                  :name => gem_name, :version => gem_version, :gem_uri => gem_uri) { |response| }

 elsif command == :sources
   RestClient.get("#{uri}/sources.xml") { |response| puts response }

 elsif command == :create_source  
   if source_name.nil? || source_uri.nil?
     puts "must specify source name and uri when creating source"
     puts opts
     exit
   end
   RestClient.post("#{uri}/sources/create", :name => source_name, :uri => source_uri) { |response| }

 elsif command == :delete_source  
   if source_id.nil?
     puts "must specify source id when deleting source"
     puts opts
     exit
   end
   RestClient.delete("#{uri}/sources/destroy/#{source_id}") { |response| }

 elsif command == :create_event  
   if gem_id.nil? || event_process.nil? || gem_version.nil? || event_version_qualifier.nil?
     puts "must specify gem id, gem version, process, and version qualfier when creating event"
     puts opts
     exit
   end
   RestClient.post("#{uri}/events/create", 
                  :managed_gem_id => gem_id, :process => event_process, :gem_version => gem_version,
                  :version_qualifier => event_version_qualifier, :process_options => event_process_options) { |response| }

 elsif command == :delete_event 
   if event_id.nil?
     puts "must specify event id when destroying event"
     puts opts
     exit
   end
   RestClient.delete("#{uri}/events/destroy/#{event_id}") { |response| }

 end

end

main()
